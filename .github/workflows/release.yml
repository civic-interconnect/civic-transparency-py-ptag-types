# .github/workflows/release.yml
name: CT Types Release (GH Release + PyPI + versioned docs)
# Designed to run only on version tags (e.g., v0.1.4).
# Final step before distribution.
# It builds distribution files, runs tests, prepares release, and publishes.

on:
  push:
    tags:
      - "v*.*.*" # trigger only on version tags like v0.1.4

permissions:
  contents: write # create the GitHub Release
  id-token: write # PyPI Trusted Publishing (OIDC)

jobs:
  # First job: Run the full CI suite
  ci-validation:
    name: Run CI validation before release
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  # Second job: Verify docs build correctly
  docs-validation:
    name: Verify documentation builds
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout (full history with tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          python-version: "3.12"

      - name: Install dependencies
        run: uv sync --extra dev --extra docs

      - name: Build documentation
        run: uv run mkdocs build --strict

      - name: Verify API docs generate correctly
        run: |
          # Check that key documentation files were generated
          [ -f "site/api/index.html" ] || { echo "API docs missing"; exit 1; }
          [ -f "site/index.html" ] || { echo "Main docs missing"; exit 1; }
          echo "Documentation built successfully"

  # Third job: Only run if both CI and docs pass
  build-and-release:
    runs-on: ubuntu-latest
    needs: [ci-validation, docs-validation]

    steps:
      - name: Checkout (full history with tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          python-version: "3.12"

      - name: Assemble. Install dev deps
        run: uv sync --extra dev --extra docs

      - name: Versioning. Extract plain version from tag (no leading `v`)
        id: ver
        shell: bash
        run: echo "plain=${GITHUB_REF_NAME#v}" >> "$GITHUB_OUTPUT"

      - name: Versioning. Print build version for logs
        run: echo "Building version ${{ steps.ver.outputs.plain }}"

      - name: Baseline. Ensure generated types are up-to-date (no drift)
        run: |
          tmpdir="$(mktemp -d)"
          uv run python .github/scripts/generate_types.py --out "$tmpdir"
          echo "Comparing committed types to freshly generated types..."
          diff -qr "$tmpdir" src/ci/transparency/ptag/types || {
            echo
            echo "ERROR: Generated types differ from committed files."
            exit 1
          }

      - name: Baseline. Run tests
        run: uv run -m pytest -q

      - name: Deploy. Build sdist + wheel (exact version)
        env:
          SETUPTOOLS_SCM_PRETEND_VERSION: ${{ steps.ver.outputs.plain }}
        run: uv build

      - name: Sanity-check wheel version equals tag
        shell: bash
        run: |
          set -euxo pipefail
          WANT="${GITHUB_REF_NAME#v}"
          WHEEL="$(ls dist/*.whl | head -n1)"
          echo "Wheel: ${WHEEL}"
          HAVE="$(python -c "import glob,re; w=sorted(glob.glob('dist/*.whl'))[0]; m=re.search(r'civic[_-]transparency[_-]types-([0-9][^-]*)-py', w); print(m.group(1) if m else '')")"
          if [ "${HAVE}" != "${WANT}" ]; then
            echo "Wheel version (${HAVE}) != tag (${WANT})"
            exit 1
          fi
          echo "OK: wheel version matches tag (${HAVE})"

      - name: Deploy. List artifacts
        run: uv run .github/scripts/list_artifacts.py

      - name: Deploy. Create GitHub Release, upload artifacts and set as latest
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: false
          make_latest: true

      - name: Deploy. Publish to PyPI (Trusted Publishing)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
