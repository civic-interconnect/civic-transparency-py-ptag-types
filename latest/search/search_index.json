{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Civic Transparency \u2013 Types (Python)","text":"<p>Strongly-typed Python models for the Civic Transparency specification, built with Pydantic v2.</p>"},{"location":"#what-this-package-provides","title":"What This Package Provides","text":"<ul> <li>Runtime Type Safety: Full validation of civic transparency data structures</li> <li>IDE Support: Complete type hints and autocompletion</li> <li>Schema Compliance: Generated directly from canonical JSON schemas</li> <li>Privacy Compliance: Built-in validation for privacy-preserving data patterns</li> </ul>"},{"location":"#types-api","title":"Types API","text":""},{"location":"#ci.transparency.ptag.types.PTagSeries","title":"<code>ci.transparency.ptag.types.PTagSeries</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"#ci.transparency.ptag.types.PTagSeries.generated_at","title":"<code>generated_at = Field(..., description='UTC timestamp when this PTagSeries was generated (ISO 8601).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"#ci.transparency.ptag.types.PTagSeries.interval","title":"<code>interval = Field(..., description='Aggregation interval for time-series data.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"#ci.transparency.ptag.types.PTagSeries.model_config","title":"<code>model_config = ConfigDict(extra='forbid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"#ci.transparency.ptag.types.PTagSeries.points","title":"<code>points = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"#ci.transparency.ptag.types.PTagSeries.topic","title":"<code>topic = Field(..., description='Topic key (e.g., hashtag) this PTagSeries describes.', min_length=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"#ci.transparency.ptag.types.PTag","title":"<code>ci.transparency.ptag.types.PTag</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"#ci.transparency.ptag.types.PTag.acct_age_bucket","title":"<code>acct_age_bucket = Field(..., description=\"Account age bucketed for privacy: e.g., '0-7d', '8-30d', '1-6m', '6-24m', '24m+'.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"#ci.transparency.ptag.types.PTag.acct_type","title":"<code>acct_type = Field(..., description='Declared identity account type.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"#ci.transparency.ptag.types.PTag.automation_flag","title":"<code>automation_flag = Field(..., description='Posting method with clear boundaries: manual (direct user interaction), scheduled (user-configured delayed posting), api_client (third-party tools like Buffer/Hootsuite), declared_bot (automated systems with explicit bot declaration).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"#ci.transparency.ptag.types.PTag.client_family","title":"<code>client_family = Field(..., description='Application class: web, mobile, third_party_api.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"#ci.transparency.ptag.types.PTag.content_digest","title":"<code>content_digest = Field(None, description='Optional privacy-preserving content similarity hash for near-duplicate detection. Fixed 12-character hex values for standard implementations, with platform-configurable length (8-16 characters). Salted daily to prevent cross-dataset correlation. Field may be omitted for platforms preferring exact-match detection.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"#ci.transparency.ptag.types.PTag.dedup_hash","title":"<code>dedup_hash = Field(..., description='Privacy-preserving rolling hash for duplicate detection (8-16 hex characters, salted daily to prevent cross-dataset correlation).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"#ci.transparency.ptag.types.PTag.media_provenance","title":"<code>media_provenance = Field(..., description='Embedded authenticity: c2pa_present, hash_only, none.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"#ci.transparency.ptag.types.PTag.model_config","title":"<code>model_config = ConfigDict(extra='forbid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"#ci.transparency.ptag.types.PTag.origin_hint","title":"<code>origin_hint = Field(None, description=\"Optional geographic origin limited to country-level (ISO country codes) or major subdivisions only for populations &gt;1M, e.g., 'US', 'US-CA', where lawful.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"#ci.transparency.ptag.types.PTag.post_kind","title":"<code>post_kind = Field(..., description='Content relationship: original, reshare, quote, reply.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"performance/","title":"Performance Guide","text":"<p>The Civic Transparency PTag Types are designed for high-throughput validation and efficient serialization.</p>"},{"location":"performance/#baseline","title":"Baseline","text":"<p>Performance is measured continuously in CI using <code>benchmark_performance.py</code>.</p> <ul> <li>Validation throughput: PTag ~160K/sec, PTagSeries (minimal) ~25K/sec</li> <li>Serialization: Pydantic\u2019s built-in JSON is ~2\u20133\u00d7 faster than stdlib <code>json</code></li> <li>Memory footprint: PTag ~1KB, PTagSeries ranges from ~7KB (minimal) to ~660KB (100 points)</li> </ul>"},{"location":"performance/#latest-results","title":"Latest Results","text":"<p>See the full benchmark outputs:</p> <ul> <li>performance_results.txt</li> <li>performance_results.md</li> </ul> <p>Performance result files are generated automatically and numbers may vary depending on hardware, OS, and Python version.</p> <p>Note: For production scenarios, start with <code>PTag</code> for metadata-heavy tasks (very fast), and use streaming/serialization strategies for large <code>PTagSeries</code>.</p>"},{"location":"usage/","title":"Usage","text":"<p>Install (update version as needed):</p> <pre><code>pip install \"civic-transparency-py-ptag-types==0.2.5\"\n</code></pre>"},{"location":"usage/#example","title":"Example","text":"<pre><code>from ci.transparency.ptag.types import PTagSeries\n\nseries = PTagSeries(\n    topic=\"#CityElection2026\",\n    generated_at=\"2026-02-07T00:00:00Z\",  # parsed to datetime\n    interval=\"minute\",\n    points=[],\n)\n\n# Serialize\ntext = series.model_dump_json(indent=2)\n\n# Deserialize / validate\nloaded = PTagSeries.model_validate_json(text)\n</code></pre>"},{"location":"usage/#extra-validation","title":"Extra Validation","text":"<pre><code>import json\nfrom importlib.resources import files\nfrom jsonschema import Draft202012Validator\n\nschema = json.loads(\n    files(\"ci.transparency.ptag.spec.schemas\")\n    .joinpath(\"series.schema.json\")\n    .read_text(\"utf-8\")\n)\nDraft202012Validator(schema).validate(series.model_dump())\n</code></pre>"},{"location":"usage/#notes","title":"Notes","text":"<ul> <li>Models are strict (extra=\"forbid\").</li> <li>Datetimes must be ISO 8601.</li> <li>Pin both the spec and types packages for compatibility.</li> </ul>"},{"location":"usage/#see-also","title":"See also","text":"<ul> <li>Schemas: https://civic-interconnect.github.io/civic-transparency-ptag-spec/</li> <li>Types API:</li> <li>PTagSeries</li> <li>TTag</li> </ul>"},{"location":"api/","title":"API Reference","text":"<p>The Civic Transparency Types package provides a clean, typed interface to the Civic Transparency specification. All models are built with Pydantic v2 and automatically validate against the canonical JSON schemas.</p>"},{"location":"api/#package-overview","title":"Package Overview","text":"<pre><code>import ci.transparency.ptag.types as ct\n\n# Available models\nct.PTagSeries   # Time-bucketed civic data\nct.PTag         # Post metadata (privacy-preserving)\n\n# Package metadata\nct.__version__     # Current package version\nct.__all__         # Public API surface\n</code></pre>"},{"location":"api/#public-api","title":"Public API","text":""},{"location":"api/#core-models","title":"Core Models","text":"Class Purpose Schema Source <code>PTagSeries</code> Aggregated time series for civic topics <code>ptag_series.schema.json</code> <code>PTag</code> Categorical post metadata (no PII) <code>ptag.schema.json</code>"},{"location":"api/#package-information","title":"Package Information","text":"<ul> <li><code>__version__</code> (str): Current package version</li> <li><code>__all__</code> (List[str]): Public API exports</li> </ul>"},{"location":"api/#import-patterns","title":"Import Patterns","text":""},{"location":"api/#recommended-barrel-import","title":"Recommended: Barrel Import","text":"<pre><code>from ci.transparency.ptag.types import PTagSeries, PTag\n\n# Clean, simple imports for application code\nseries = PTagSeries(...)\ntag = PTag(...)\n</code></pre>"},{"location":"api/#alternative-direct-module-import","title":"Alternative: Direct Module Import","text":"<pre><code>from ci.transparency.ptag.types.series import PTagSeries\nfrom ci.transparency.ptag.types.ptag import PTag\n\n# Useful for IDE \"go to definition\" and explicit dependencies\n</code></pre>"},{"location":"api/#package-level-import","title":"Package-Level Import","text":"<pre><code>import ci.transparency.ptag.types as ct\n\n# Namespaced access\nseries = ct.PTagSeries(...)\nversion = ct.__version__\n</code></pre>"},{"location":"api/#base-model-behavior","title":"Base Model Behavior","text":"<p>All types inherit from <code>pydantic.BaseModel</code> and provide the complete Pydantic v2 API:</p>"},{"location":"api/#instance-methods","title":"Instance Methods","text":"<pre><code>series = PTagSeries(...)\n\n# Serialization\ndata = series.model_dump()                      # dict (JSON-safe)\njson_str = series.model_dump_json()             # JSON string\njson_pretty = series.model_dump_json(indent=2)  # Pretty JSON\n\n# Copying and updating\nupdated = series.model_copy(update={'topic': '#NewTopic'})\n</code></pre>"},{"location":"api/#class-methods","title":"Class Methods","text":"<pre><code># Validation and parsing\nseries = PTagSeries.model_validate(data_dict)        # dict to PTagSeries\nseries = PTagSeries.model_validate_json(json_string) # JSON to PTagSeries\n\n# Schema introspection\nschema = PTagSeries.model_json_schema()              # Pydantic-generated schema\nfields = PTagSeries.model_fields                     # Field definitions\n</code></pre>"},{"location":"api/#configuration","title":"Configuration","text":"<p>All models use strict validation: - <code>extra=\"forbid\"</code>: Unknown fields are rejected - Type coercion: Automatic type conversion where safe - Validation: Full constraint checking (patterns, ranges, enums)</p>"},{"location":"api/#validation-features","title":"Validation Features","text":""},{"location":"api/#runtime-type-safety","title":"Runtime Type Safety","text":"<pre><code>from pydantic import ValidationError\n\ntry:\n    # This will fail validation\n    invalid_series = PTagSeries(\n        topic=\"\",  # Empty string not allowed\n        generated_at=\"not-a-date\",  # Invalid datetime\n        interval=\"invalid\",  # Not in enum\n        points=[]\n    )\nexcept ValidationError as e:\n    print(f\"Validation errors: {e}\")\n</code></pre>"},{"location":"api/#enum-validation","title":"Enum Validation","text":"<pre><code>from ci.transparency.ptag.types import PTag\n\n# Valid enum values are enforced\ntag = PTag(\n    acct_type=\"person\",        # \u2713 Valid\n    automation_flag=\"manual\"   # \u2713 Valid\n    # acct_type=\"wizard\"       # \u2717 Would raise ValidationError\n)\n</code></pre>"},{"location":"api/#pattern-and-range-validation","title":"Pattern and Range Validation","text":"<pre><code># String patterns, numeric ranges, etc. are validated\ntag = PTag(\n    dedup_hash=\"abc123\",       # \u2713 Valid hex pattern\n    origin_hint=\"US-CA\",       # \u2713 Valid country-region format\n    # dedup_hash=\"xyz!\"        # \u2717 Invalid characters\n)\n</code></pre>"},{"location":"api/#schema-access","title":"Schema Access","text":""},{"location":"api/#pydantic-schema-runtime","title":"Pydantic Schema (Runtime)","text":"<pre><code># Get Pydantic-generated schema for tooling\nschema = PTagSeries.model_json_schema()\nprint(schema['properties']['topic'])  # Field definition\n</code></pre>"},{"location":"api/#canonical-schema-normative","title":"Canonical Schema (Normative)","text":"<p>Access the official JSON schemas that define the specification:</p> <pre><code>import json\nfrom importlib.resources import files\n\n# Get the source-of-truth schema\nschema_text = files(\"ci.transparency.ptag.spec.schemas\").joinpath(\n    \"series.schema.json\"\n).read_text(\"utf-8\")\ncanonical_schema = json.loads(schema_text)\n\n# Use for validation, documentation generation, etc.\nfrom jsonschema import Draft202012Validator\nvalidator = Draft202012Validator(canonical_schema)\nvalidator.validate(series.model_dump())\n</code></pre>"},{"location":"api/#serialization-details","title":"Serialization Details","text":""},{"location":"api/#json-compatibility","title":"JSON Compatibility","text":"<pre><code>series = PTagSeries(...)\n\n# These produce equivalent JSON-safe data\ndata1 = series.model_dump()\ndata2 = json.loads(series.model_dump_json())\nassert data1 == data2\n</code></pre>"},{"location":"api/#datetime-handling","title":"Datetime Handling","text":"<pre><code>from datetime import datetime\n\nseries = PTagSeries(\n    generated_at=datetime.now(),  # Accepts datetime objects\n    # ...\n)\n\n# Serializes to ISO 8601 strings\ndata = series.model_dump()\nassert isinstance(data['generated_at'], str)  # \"2025-01-15T12:00:00Z\"\n</code></pre>"},{"location":"api/#field-customization","title":"Field Customization","text":"<pre><code># Exclude fields during serialization\npublic_data = series.model_dump(exclude={'generated_at'})\n\n# Include only specific fields\nminimal_data = series.model_dump(include={'topic', 'interval'})\n\n# Use aliases if defined (none currently in this spec)\naliased_data = series.model_dump(by_alias=True)\n</code></pre>"},{"location":"api/#error-handling","title":"Error Handling","text":""},{"location":"api/#validation-errors","title":"Validation Errors","text":"<pre><code>from pydantic import ValidationError\n\ndef safe_parse_series(data: dict) -&gt; PTagSeries | None:\n    \"\"\"Parse series data with error handling.\"\"\"\n    try:\n        return PTagSeries.model_validate(data)\n    except ValidationError as e:\n        # Log specific validation failures\n        for error in e.errors():\n            field = \" \u2192 \".join(str(loc) for loc in error['loc'])\n            print(f\"Validation error in {field}: {error['msg']}\")\n        return None\n</code></pre>"},{"location":"api/#field-level-errors","title":"Field-Level Errors","text":"<pre><code>try:\n    PTagSeries.model_validate(bad_data)\nexcept ValidationError as e:\n    for error in e.errors():\n        print(f\"Field: {error['loc']}\")       # Which field failed\n        print(f\"Value: {error['input']}\")     # The invalid input\n        print(f\"Error: {error['msg']}\")       # What went wrong\n        print(f\"Type: {error['type']}\")       # Error category\n</code></pre>"},{"location":"api/#framework-integration","title":"Framework Integration","text":""},{"location":"api/#fastapi","title":"FastAPI","text":"<p>Automatic request/response validation:</p> <pre><code>from fastapi import FastAPI\nfrom ci.transparency.ptag.types import PTagSeries\n\napp = FastAPI()\n\n@app.post(\"/data\")\nasync def receive_data(series: PTagSeries) -&gt; dict:\n    # 'series' is automatically validated\n    return {\"received\": series.topic}\n</code></pre>"},{"location":"api/#dataclasses-integration","title":"Dataclasses Integration","text":"<pre><code>from dataclasses import dataclass\nfrom ci.transparency.ptag.types import PTagSeries\n\n@dataclass\nclass ProcessingResult:\n    series: PTagSeries\n    processed_at: str\n\n    def to_dict(self):\n        return {\n            'series': self.series.model_dump(),\n            'processed_at': self.processed_at\n        }\n</code></pre>"},{"location":"api/#django-models","title":"Django Models","text":"<pre><code>from django.db import models\nfrom ci.transparency.ptag.types import PTagSeries\nimport json\n\nclass CivicDataRecord(models.Model):\n    topic = models.CharField(max_length=255)\n    data = models.JSONField()\n\n    def get_series(self) -&gt; PTagSeries:\n        return PTagSeries.model_validate(self.data)\n\n    def set_series(self, series: PTagSeries):\n        self.topic = series.topic\n        self.data = series.model_dump()\n</code></pre>"},{"location":"api/#type-information","title":"Type Information","text":""},{"location":"api/#static-type-checking","title":"Static Type Checking","text":"<p>The package includes <code>py.typed</code> for full mypy/pyright support:</p> <pre><code>from ci.transparency.ptag.types import PTagSeries\n\ndef process_series(series: PTagSeries) -&gt; str:\n    # Full type safety and IDE completion\n    return series.topic.upper()\n\n# mypy will catch type errors\nprocess_series(\"not a series\")  # Error: Argument 1 has incompatible type\n</code></pre>"},{"location":"api/#runtime-type-inspection","title":"Runtime Type Inspection","text":"<pre><code>from ci.transparency.ptag.types import PTagSeries\nimport inspect\n\n# Inspect model structure\nprint(PTagSeries.__annotations__)  # Field type annotations\nprint(PTagSeries.model_fields)     # Pydantic field definitions\n\n# Check inheritance\nassert issubclass(PTagSeries, BaseModel)\n</code></pre>"},{"location":"api/ptag/","title":"Provenance Tag (Pydantic)","text":""},{"location":"api/ptag/#ci.transparency.ptag.types.PTag","title":"<code>ci.transparency.ptag.types.PTag</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/ptag/#ci.transparency.ptag.types.PTag.acct_age_bucket","title":"<code>acct_age_bucket = Field(..., description=\"Account age bucketed for privacy: e.g., '0-7d', '8-30d', '1-6m', '6-24m', '24m+'.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/ptag/#ci.transparency.ptag.types.PTag.acct_type","title":"<code>acct_type = Field(..., description='Declared identity account type.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/ptag/#ci.transparency.ptag.types.PTag.automation_flag","title":"<code>automation_flag = Field(..., description='Posting method with clear boundaries: manual (direct user interaction), scheduled (user-configured delayed posting), api_client (third-party tools like Buffer/Hootsuite), declared_bot (automated systems with explicit bot declaration).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/ptag/#ci.transparency.ptag.types.PTag.client_family","title":"<code>client_family = Field(..., description='Application class: web, mobile, third_party_api.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/ptag/#ci.transparency.ptag.types.PTag.content_digest","title":"<code>content_digest = Field(None, description='Optional privacy-preserving content similarity hash for near-duplicate detection. Fixed 12-character hex values for standard implementations, with platform-configurable length (8-16 characters). Salted daily to prevent cross-dataset correlation. Field may be omitted for platforms preferring exact-match detection.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/ptag/#ci.transparency.ptag.types.PTag.dedup_hash","title":"<code>dedup_hash = Field(..., description='Privacy-preserving rolling hash for duplicate detection (8-16 hex characters, salted daily to prevent cross-dataset correlation).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/ptag/#ci.transparency.ptag.types.PTag.media_provenance","title":"<code>media_provenance = Field(..., description='Embedded authenticity: c2pa_present, hash_only, none.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/ptag/#ci.transparency.ptag.types.PTag.model_config","title":"<code>model_config = ConfigDict(extra='forbid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/ptag/#ci.transparency.ptag.types.PTag.origin_hint","title":"<code>origin_hint = Field(None, description=\"Optional geographic origin limited to country-level (ISO country codes) or major subdivisions only for populations &gt;1M, e.g., 'US', 'US-CA', where lawful.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/ptag/#ci.transparency.ptag.types.PTag.post_kind","title":"<code>post_kind = Field(..., description='Content relationship: original, reshare, quote, reply.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/ptag_series/","title":"PTagSeries (Pydantic)","text":""},{"location":"api/ptag_series/#ci.transparency.ptag.types.PTagSeries","title":"<code>ci.transparency.ptag.types.PTagSeries</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/ptag_series/#ci.transparency.ptag.types.PTagSeries.generated_at","title":"<code>generated_at = Field(..., description='UTC timestamp when this PTagSeries was generated (ISO 8601).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/ptag_series/#ci.transparency.ptag.types.PTagSeries.interval","title":"<code>interval = Field(..., description='Aggregation interval for time-series data.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/ptag_series/#ci.transparency.ptag.types.PTagSeries.model_config","title":"<code>model_config = ConfigDict(extra='forbid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/ptag_series/#ci.transparency.ptag.types.PTagSeries.points","title":"<code>points = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/ptag_series/#ci.transparency.ptag.types.PTagSeries.topic","title":"<code>topic = Field(..., description='Topic key (e.g., hashtag) this PTagSeries describes.', min_length=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""}]}